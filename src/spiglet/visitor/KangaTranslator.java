//
// Generated by JTB 1.3.2
//

package spiglet.visitor;
import spiglet.symbol.KangaPrinter;
import spiglet.symbol.MMethod;
import spiglet.symbol.MMethodList;
import spiglet.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class KangaTranslator extends GJDepthFirst<String, MMethod> {

    public String getReg(String destReg, int num, MMethod curMethod, boolean inKill) {
        if (curMethod.tReg.containsKey(num))
            return "t" + curMethod.tReg.get(num);
        else if (curMethod.sReg.containsKey(num))
            return "s" + curMethod.sReg.get(num);
        else if (!inKill){
            KangaPrinter.myPrintln("ALOAD " + destReg + " SPILLEDARG " + curMethod.stack.get(num));
        }
        return destReg;
    }

    public void saveReg(String srcReg, int num, MMethod curMethod) {
        if (curMethod.tReg.containsKey(num) || curMethod.sReg.containsKey(num))
            return;
        else
            KangaPrinter.myPrintln("ASTORE SPILLEDARG " + curMethod.stack.get(num) + " " + srcReg);
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //

    public String visit(NodeOptional n, MMethod argu) {
        if ( n.present() ) {
            String ret = n.node.accept(this,argu);
            KangaPrinter.myPrint(ret);
            return ret;
        }
        else
            return null;
    }

    public String visit(NodeToken n, MMethod argu) { return n.tokenImage; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public String visit(Goal n, MMethod argu) {
        String _ret=null;
        MMethod curMethod = MMethodList.get("MAIN");
        KangaPrinter.printMethod("MAIN", curMethod.getArgNum(), curMethod.getStackNum(), curMethod.getMaxCalleeArgNum());
        n.f0.accept(this, argu);
        n.f1.accept(this, curMethod);
        n.f2.accept(this, argu);
        KangaPrinter.printEnd();
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public String visit(Procedure n, MMethod argu) {
        String _ret=null;
        MMethod curMethod = MMethodList.get(n.f0.f0.tokenImage);
        KangaPrinter.printMethod(curMethod.getName(), curMethod.getArgNum(), curMethod.getStackNum(), curMethod.getMaxCalleeArgNum());
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, curMethod);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public String visit(NoOpStmt n, MMethod argu) {
        String _ret=null;
        KangaPrinter.myPrintln("NOOP");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public String visit(ErrorStmt n, MMethod argu) {
        String _ret=null;
        KangaPrinter.myPrintln("ERROR");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    public String visit(CJumpStmt n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        int num = Integer.parseInt(n.f1.accept(this, argu));
        String label = n.f2.accept(this, argu);
        String reg = getReg("v0", num, argu, false);
        KangaPrinter.myPrintln(String.format("CJUMP %s %s", reg, label));
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public String visit(JumpStmt n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        String label = n.f1.accept(this, argu);
        KangaPrinter.myPrintln("JUMP " + label);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    public String visit(HStoreStmt n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        int n1 = Integer.parseInt(n.f1.accept(this, argu));
        String offset = n.f2.accept(this, argu);
        int n2 = Integer.parseInt(n.f3.accept(this, argu));
        String reg1 = getReg("v0", n1, argu, false);
        String reg2 = getReg("v1", n2, argu, false);
        KangaPrinter.myPrintln(String.format("HSTORE %s %s %s", reg1, offset, reg2));
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    public String visit(HLoadStmt n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        int n1 = Integer.parseInt(n.f1.accept(this, argu));
        int n2 = Integer.parseInt(n.f2.accept(this, argu));
        String offset = n.f3.accept(this, argu);
        String reg1 = getReg("v0", n1, argu, true);
        String reg2 = getReg("v1", n2, argu, false);
        KangaPrinter.myPrintln(String.format("HLOAD %s %s %s", reg1, reg2, offset));
        saveReg(reg1, n1, argu);
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public String visit(MoveStmt n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        int n1 = Integer.parseInt(n.f1.accept(this, argu));
        String exp = n.f2.accept(this, argu);

        String reg1 = getReg("v0", n1, argu, true);
        KangaPrinter.myPrintln(String.format("MOVE %s %s", reg1, exp));
        saveReg(reg1, n1, argu);
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public String visit(PrintStmt n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        String exp = n.f1.accept(this, argu);
        KangaPrinter.myPrintln("PRINT " + exp);
        return _ret;
    }

    /**
     * f0 -> Call()
     *       | HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public String visit(Exp n, MMethod argu) {
        String _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    public String visit(StmtExp n, MMethod argu) {
        String _ret=null;
        // save regs
        if (argu.getsRegNumMax() > 0) {
            int offset = Integer.max(argu.getArgNum() - 4, 0);
            for (int i = 0; i < argu.getsRegNumMax(); i++)
                KangaPrinter.myPrintln(String.format("ASTORE SPILLEDARG %d s%d", offset + i ,i));
        }
        int bounds = Integer.min(argu.getArgNum(), 4);
        for (int i = 0; i < bounds; i++) {
            if (argu.intervals.containsKey(i)) { // some args may never be used
                String reg = getReg("v0", i, argu, true);
                KangaPrinter.myPrintln("MOVE " + reg + " a" + i);
                saveReg(reg, i, argu);
            }
        }
        if (argu.getArgNum() > 4) {
            for (int i = 4; i< argu.getArgNum(); i++) {
                if (argu.intervals.containsKey(i)) { // some args may never be used
                    String reg = getReg("v0", i, argu, true);
                    KangaPrinter.myPrintln(String.format("ALOAD %s SPILLEDARG %d", reg, i - 4));
                    saveReg(reg, i, argu);
                }
            }
        }

        n.f1.accept(this, argu);
        String exp = n.f3.accept(this, argu);
        KangaPrinter.myPrintln("MOVE v0 " + exp); // return info

        // restore regs
        if (argu.getsRegNumMax() > 0) {
            int offset = Integer.max(argu.getArgNum() - 4, 0);
            for (int i = 0; i < argu.getsRegNumMax(); i++)
                KangaPrinter.myPrintln(String.format("ALOAD s%d SPILLEDARG %d", i, offset + i));
        }
        KangaPrinter.printEnd();
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    public String visit(Call n, MMethod argu) {
        String _ret = "v0";

        // first build args
        Vector<Node> args = n.f3.nodes;
        int bounds = Integer.min(args.size(), 4);
        for (int i = 0; i < bounds; i++) {
            int num = Integer.parseInt(args.get(i).accept(this, argu));
            String reg = getReg("v1", num, argu, false);
            KangaPrinter.myPrintln(String.format("MOVE a%d %s", i, reg));
        }
        if (args.size() > 4) {
            for (int i = 4; i < args.size(); i++) {
                int num = Integer.parseInt(args.get(i).accept(this, argu));
                String reg = getReg("v1", num, argu, false);
                KangaPrinter.myPrintln(String.format("PASSARG %d %s", i - 3, reg));
            }
        }
        String exp = n.f1.accept(this, argu);
        KangaPrinter.myPrintln("CALL " + exp);
        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public String visit(HAllocate n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        String exp = n.f1.accept(this, argu);
        _ret = "HALLOCATE " + exp;
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Temp()
     * f2 -> SimpleExp()
     */
    public String visit(BinOp n, MMethod argu) {
        String _ret=null;
        String op = n.f0.accept(this, argu);
        int n1 = Integer.parseInt(n.f1.accept(this, argu));
        String exp = n.f2.accept(this, argu);
        String reg1 = getReg("v0", n1, argu, false);
        _ret = String.format("%s %s %s", op, reg1, exp);
        return _ret;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public String visit(Operator n, MMethod argu) {
        String _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Temp()
     *       | IntegerLiteral()
     *       | Label()
     */
    public String visit(SimpleExp n, MMethod argu) {
        String _ret = n.f0.accept(this, argu);
        if (n.f0.choice instanceof Temp) {
            String reg = getReg("v1", Integer.parseInt(_ret), argu, false);
            return reg;
        }
        return _ret;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public String visit(Temp n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return n.f1.f0.tokenImage;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        return n.f0.tokenImage;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Label n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        return n.f0.tokenImage;
    }

}
