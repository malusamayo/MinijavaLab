//
// Generated by JTB 1.3.2
//

package spiglet.visitor;
import spiglet.symbol.MMethod;
import spiglet.symbol.MMethodList;
import spiglet.symbol.Vertex;
import spiglet.syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class BuildGraphVisitor extends GJDepthFirst<String, MMethod> {
    int curLine;
    HashMap<String, Integer> labelToLine = new HashMap<>();
    HashMap<Integer, String> jumpLabels = new HashMap<>();

    //
    // Auto class visitors--probably don't need to be overridden.
    //

    public String visit(NodeOptional n, MMethod argu) {
        if ( n.present() ) {
            String label = n.node.accept(this,argu);
            labelToLine.put(label, curLine);
            return label;
        }
        else
            return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public String visit(Goal n, MMethod argu) {
        String _ret=null;
        MMethod curMethod = new MMethod("MAIN", 0);
        MMethodList.insert(curMethod);

        n.f0.accept(this, argu);
        curMethod.getGraph().insertVertex(new Vertex(curLine));
        curMethod.getGraph().insertEdge(curLine, curLine+1);
        curLine++;
        n.f1.accept(this, curMethod);
        curMethod.getGraph().insertVertex(new Vertex(curLine));
        curLine++;

        for(Map.Entry<Integer,String> e: jumpLabels.entrySet()) {
            curMethod.getGraph().insertEdge(e.getKey(), labelToLine.get(e.getValue()));
        }
        jumpLabels.clear();
        labelToLine.clear();

        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        MMethodList.buildLiveVars();
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public String visit(Procedure n, MMethod argu) {
        String _ret=null;
        curLine = 0;
        MMethod curMethod = new MMethod(n.f0.f0.tokenImage, Integer.parseInt(n.f2.f0.tokenImage));
        if (curMethod.getArgNum() > 4)
            curMethod.setStackNum(curMethod.getArgNum()-4);
        MMethodList.insert(curMethod);

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, curMethod);

        for(Map.Entry<Integer,String> e: jumpLabels.entrySet()) {
            curMethod.getGraph().insertEdge(e.getKey(), labelToLine.get(e.getValue()));
        }
        jumpLabels.clear();
        labelToLine.clear();
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     */
    public String visit(Stmt n, MMethod argu) {
        String _ret=null;
        Vertex v = new Vertex(curLine);
        argu.getGraph().insertVertex(v);

        n.f0.accept(this, argu);
        curLine++;
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public String visit(NoOpStmt n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertEdge(curLine, curLine+1);
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public String visit(ErrorStmt n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertEdge(curLine, curLine+1);
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    public String visit(CJumpStmt n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertEdge(curLine, curLine+1);
        jumpLabels.put(curLine, n.f2.f0.tokenImage);
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public String visit(JumpStmt n, MMethod argu) {
        String _ret=null;
        jumpLabels.put(curLine, n.f1.f0.tokenImage);
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    public String visit(HStoreStmt n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertEdge(curLine, curLine+1);

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    public String visit(HLoadStmt n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertEdge(curLine, curLine+1);
        argu.getGraph().addKill(curLine, Integer.parseInt(n.f1.f1.f0.tokenImage));

        n.f0.accept(this, argu);
//        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public String visit(MoveStmt n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertEdge(curLine, curLine+1);
        argu.getGraph().addKill(curLine, Integer.parseInt(n.f1.f1.f0.tokenImage));

        n.f0.accept(this, argu);
//        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public String visit(PrintStmt n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertEdge(curLine, curLine+1);
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    public String visit(StmtExp n, MMethod argu) {
        String _ret=null;
        argu.getGraph().insertVertex(new Vertex(curLine));
        argu.getGraph().insertEdge(curLine, curLine+1);
        curLine++;

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);

        argu.getGraph().insertVertex(new Vertex(curLine));
        argu.getGraph().insertEdge(curLine, curLine+1);
        n.f3.accept(this, argu);
        curLine++;

        n.f4.accept(this, argu);
        argu.getGraph().insertVertex(new Vertex(curLine));
        curLine++;

        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    public String visit(Call n, MMethod argu) {
        String _ret=null;
        argu.addCallSites(curLine);
        argu.setMaxCalleeArgNum(Integer.max(argu.getMaxCalleeArgNum(), n.f3.size()));

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public String visit(Temp n, MMethod argu) {
        String _ret=null;
        argu.getGraph().addGen(curLine, Integer.parseInt(n.f1.f0.tokenImage)); // only used by appropriate stmts
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Label n, MMethod argu) {
        String _ret=null;
        n.f0.accept(this, argu);
        return n.f0.tokenImage;
    }

}
